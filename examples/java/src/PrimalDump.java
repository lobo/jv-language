import org.objectweb.asm.*;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

public class PrimalDump implements Opcodes {

    public static byte[] dump() throws Exception {

        ClassWriter cw = new ClassWriter(0);
        FieldVisitor fv;
        MethodVisitor mv;
        AnnotationVisitor av0;

        cw.visit(52, ACC_PUBLIC + ACC_SUPER, "Primal", null, "java/lang/Object", null);

        cw.visitSource("Primal.java", null);

        {
            mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(1, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
            mv.visitInsn(RETURN);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLocalVariable("this", "LPrimal;", null, l0, l1, 0);
            mv.visitMaxs(1, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PRIVATE + ACC_STATIC, "intSqrt", "(J)J", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(4, l0);
            mv.visitVarInsn(LLOAD, 0);
            mv.visitInsn(LCONST_0);
            mv.visitInsn(LCMP);
            Label l1 = new Label();
            mv.visitJumpInsn(IFGT, l1);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitLineNumber(5, l2);
            mv.visitInsn(LCONST_0);
            mv.visitInsn(LRETURN);
            mv.visitLabel(l1);
            mv.visitLineNumber(8, l1);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitInsn(LCONST_1);
            mv.visitVarInsn(LSTORE, 2);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(11, l3);
            mv.visitFrame(Opcodes.F_APPEND, 1, new Object[]{Opcodes.LONG}, 0, null);
            mv.visitLdcInsn(new Long(4L));
            mv.visitVarInsn(LLOAD, 2);
            mv.visitInsn(LMUL);
            mv.visitVarInsn(LLOAD, 2);
            mv.visitInsn(LMUL);
            mv.visitVarInsn(LLOAD, 0);
            mv.visitInsn(LCMP);
            Label l4 = new Label();
            mv.visitJumpInsn(IFGT, l4);
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitLineNumber(12, l5);
            mv.visitVarInsn(LLOAD, 2);
            mv.visitLdcInsn(new Long(2L));
            mv.visitInsn(LMUL);
            mv.visitVarInsn(LSTORE, 2);
            mv.visitJumpInsn(GOTO, l3);
            mv.visitLabel(l4);
            mv.visitLineNumber(15, l4);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(LLOAD, 2);
            mv.visitVarInsn(LSTORE, 4);
            Label l6 = new Label();
            mv.visitLabel(l6);
            mv.visitLineNumber(16, l6);
            mv.visitLdcInsn(new Long(2L));
            mv.visitVarInsn(LLOAD, 2);
            mv.visitInsn(LMUL);
            mv.visitVarInsn(LSTORE, 6);
            Label l7 = new Label();
            mv.visitLabel(l7);
            mv.visitLineNumber(17, l7);
            mv.visitInsn(LCONST_0);
            mv.visitVarInsn(LSTORE, 8);
            Label l8 = new Label();
            mv.visitLabel(l8);
            mv.visitLineNumber(21, l8);
            mv.visitFrame(Opcodes.F_APPEND, 3, new Object[]{Opcodes.LONG, Opcodes.LONG, Opcodes.LONG}, 0, null);
            mv.visitVarInsn(LLOAD, 4);
            mv.visitVarInsn(LLOAD, 6);
            mv.visitInsn(LCMP);
            Label l9 = new Label();
            mv.visitJumpInsn(IFGE, l9);
            Label l10 = new Label();
            mv.visitLabel(l10);
            mv.visitLineNumber(22, l10);
            mv.visitVarInsn(LLOAD, 4);
            mv.visitVarInsn(LLOAD, 6);
            mv.visitVarInsn(LLOAD, 4);
            mv.visitInsn(LSUB);
            mv.visitLdcInsn(new Long(2L));
            mv.visitInsn(LDIV);
            mv.visitInsn(LADD);
            mv.visitVarInsn(LSTORE, 8);
            Label l11 = new Label();
            mv.visitLabel(l11);
            mv.visitLineNumber(24, l11);
            mv.visitVarInsn(LLOAD, 8);
            mv.visitVarInsn(LLOAD, 8);
            mv.visitInsn(LMUL);
            mv.visitVarInsn(LLOAD, 0);
            mv.visitInsn(LCMP);
            Label l12 = new Label();
            mv.visitJumpInsn(IFGE, l12);
            Label l13 = new Label();
            mv.visitLabel(l13);
            mv.visitLineNumber(25, l13);
            mv.visitVarInsn(LLOAD, 8);
            mv.visitInsn(LCONST_1);
            mv.visitInsn(LADD);
            mv.visitVarInsn(LSTORE, 4);
            mv.visitJumpInsn(GOTO, l8);
            mv.visitLabel(l12);
            mv.visitLineNumber(26, l12);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(LLOAD, 8);
            mv.visitVarInsn(LLOAD, 8);
            mv.visitInsn(LMUL);
            mv.visitVarInsn(LLOAD, 0);
            mv.visitInsn(LCMP);
            Label l14 = new Label();
            mv.visitJumpInsn(IFLE, l14);
            Label l15 = new Label();
            mv.visitLabel(l15);
            mv.visitLineNumber(27, l15);
            mv.visitVarInsn(LLOAD, 8);
            mv.visitInsn(LCONST_1);
            mv.visitInsn(LSUB);
            mv.visitVarInsn(LSTORE, 6);
            mv.visitJumpInsn(GOTO, l8);
            mv.visitLabel(l14);
            mv.visitLineNumber(29, l14);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(LLOAD, 8);
            mv.visitInsn(LRETURN);
            mv.visitLabel(l9);
            mv.visitLineNumber(35, l9);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(LLOAD, 8);
            mv.visitInsn(LCONST_1);
            mv.visitInsn(LADD);
            mv.visitVarInsn(LSTORE, 10);
            Label l16 = new Label();
            mv.visitLabel(l16);
            mv.visitLineNumber(37, l16);
            mv.visitFrame(Opcodes.F_APPEND, 1, new Object[]{Opcodes.LONG}, 0, null);
            mv.visitVarInsn(LLOAD, 10);
            mv.visitVarInsn(LLOAD, 10);
            mv.visitInsn(LMUL);
            mv.visitVarInsn(LLOAD, 0);
            mv.visitInsn(LCMP);
            Label l17 = new Label();
            mv.visitJumpInsn(IFLE, l17);
            Label l18 = new Label();
            mv.visitLabel(l18);
            mv.visitLineNumber(38, l18);
            mv.visitVarInsn(LLOAD, 10);
            mv.visitInsn(LCONST_1);
            mv.visitInsn(LSUB);
            mv.visitVarInsn(LSTORE, 10);
            mv.visitJumpInsn(GOTO, l16);
            mv.visitLabel(l17);
            mv.visitLineNumber(41, l17);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(LLOAD, 10);
            mv.visitInsn(LRETURN);
            Label l19 = new Label();
            mv.visitLabel(l19);
            mv.visitLocalVariable("number", "J", null, l0, l19, 0);
            mv.visitLocalVariable("sqrt", "J", null, l3, l19, 2);
            mv.visitLocalVariable("left", "J", null, l6, l19, 4);
            mv.visitLocalVariable("right", "J", null, l7, l19, 6);
            mv.visitLocalVariable("middle", "J", null, l8, l19, 8);
            mv.visitLocalVariable("ret", "J", null, l16, l19, 10);
            mv.visitMaxs(6, 12);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PRIVATE + ACC_STATIC, "isPrime", "(J)Z", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(45, l0);
            mv.visitVarInsn(LLOAD, 0);
            mv.visitLdcInsn(new Long(2L));
            mv.visitInsn(LCMP);
            Label l1 = new Label();
            mv.visitJumpInsn(IFNE, l1);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitLineNumber(46, l2);
            mv.visitInsn(ICONST_1);
            mv.visitInsn(IRETURN);
            mv.visitLabel(l1);
            mv.visitLineNumber(48, l1);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(LLOAD, 0);
            mv.visitLdcInsn(new Long(2L));
            mv.visitInsn(LCMP);
            Label l3 = new Label();
            mv.visitJumpInsn(IFLT, l3);
            mv.visitVarInsn(LLOAD, 0);
            mv.visitLdcInsn(new Long(2L));
            mv.visitInsn(LREM);
            mv.visitInsn(LCONST_0);
            mv.visitInsn(LCMP);
            Label l4 = new Label();
            mv.visitJumpInsn(IFNE, l4);
            mv.visitLabel(l3);
            mv.visitLineNumber(49, l3);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitInsn(ICONST_0);
            mv.visitInsn(IRETURN);
            mv.visitLabel(l4);
            mv.visitLineNumber(51, l4);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitInsn(ICONST_3);
            mv.visitVarInsn(ISTORE, 2);
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitFrame(Opcodes.F_APPEND, 1, new Object[]{Opcodes.INTEGER}, 0, null);
            mv.visitVarInsn(ILOAD, 2);
            mv.visitInsn(I2L);
            mv.visitVarInsn(LLOAD, 0);
            mv.visitMethodInsn(INVOKESTATIC, "Primal", "intSqrt", "(J)J", false);
            mv.visitInsn(LCMP);
            Label l6 = new Label();
            mv.visitJumpInsn(IFGE, l6);
            Label l7 = new Label();
            mv.visitLabel(l7);
            mv.visitLineNumber(52, l7);
            mv.visitVarInsn(LLOAD, 0);
            mv.visitVarInsn(ILOAD, 2);
            mv.visitInsn(I2L);
            mv.visitInsn(LREM);
            mv.visitInsn(LCONST_0);
            mv.visitInsn(LCMP);
            Label l8 = new Label();
            mv.visitJumpInsn(IFNE, l8);
            Label l9 = new Label();
            mv.visitLabel(l9);
            mv.visitLineNumber(53, l9);
            mv.visitInsn(ICONST_0);
            mv.visitInsn(IRETURN);
            mv.visitLabel(l8);
            mv.visitLineNumber(51, l8);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitIincInsn(2, 2);
            mv.visitJumpInsn(GOTO, l5);
            mv.visitLabel(l6);
            mv.visitLineNumber(56, l6);
            mv.visitFrame(Opcodes.F_CHOP, 1, null, 0, null);
            mv.visitInsn(ICONST_1);
            mv.visitInsn(IRETURN);
            Label l10 = new Label();
            mv.visitLabel(l10);
            mv.visitLocalVariable("i", "I", null, l5, l6, 2);
            mv.visitLocalVariable("number", "J", null, l0, l10, 0);
            mv.visitMaxs(4, 3);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "main", "([Ljava/lang/String;)V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(60, l0);
            mv.visitIntInsn(BIPUSH, 7);
            mv.visitVarInsn(ISTORE, 1);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(61, l1);
            mv.visitFieldInsn(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
            mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
            mv.visitLdcInsn("Es primo ");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitVarInsn(ILOAD, 1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(I)Ljava/lang/StringBuilder;", false);
            mv.visitLdcInsn("?");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitLineNumber(62, l2);
            mv.visitFieldInsn(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
            mv.visitVarInsn(ILOAD, 1);
            mv.visitInsn(I2L);
            mv.visitMethodInsn(INVOKESTATIC, "Primal", "isPrime", "(J)Z", false);
            Label l3 = new Label();
            mv.visitJumpInsn(IFEQ, l3);
            mv.visitLdcInsn("SI");
            Label l4 = new Label();
            mv.visitJumpInsn(GOTO, l4);
            mv.visitLabel(l3);
            mv.visitFrame(Opcodes.F_FULL, 2, new Object[]{"[Ljava/lang/String;", Opcodes.INTEGER}, 1, new Object[]{"java/io/PrintStream"});
            mv.visitLdcInsn("NO");
            mv.visitLabel(l4);
            mv.visitFrame(Opcodes.F_FULL, 2, new Object[]{"[Ljava/lang/String;", Opcodes.INTEGER}, 2, new Object[]{"java/io/PrintStream", "java/lang/String"});
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitLineNumber(63, l5);
            mv.visitInsn(RETURN);
            Label l6 = new Label();
            mv.visitLabel(l6);
            mv.visitLocalVariable("args", "[Ljava/lang/String;", null, l0, l6, 0);
            mv.visitLocalVariable("n", "I", null, l1, l6, 1);
            mv.visitMaxs(3, 2);
            mv.visitEnd();
        }
        cw.visitEnd();

        return cw.toByteArray();
    }

    public static void main(String[] args) {
        try {
            Path file = Paths.get("examples/java/gen/Primal.class");
            Files.write(file, PrimalDump.dump());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
